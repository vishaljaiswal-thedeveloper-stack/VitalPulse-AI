import { useState, useEffect, useRef } from 'react';
import { useTranslation } from 'react-i18next';
import { supabase, isSupabaseConfigured } from '../lib/supabase';
import './MentalIssueSolution.css';

function MentalIssueSolution() {
  const { t, i18n } = useTranslation();
  const [selectedIssue, setSelectedIssue] = useState('');
  const [aiSuggestion, setAiSuggestion] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [user, setUser] = useState(null);
  const [savedSessions, setSavedSessions] = useState([]);
  const [currentVideoUrl, setCurrentVideoUrl] = useState('');
  const [currentAudioUrl, setCurrentAudioUrl] = useState('');
  const [isPlayingAudio, setIsPlayingAudio] = useState(false);
  const [mediaContent, setMediaContent] = useState(null);
  const [isMediaLoading, setIsMediaLoading] = useState(false);
  const [videoError, setVideoError] = useState('');
  const [audioError, setAudioError] = useState('');
  const audioRef = useRef(null);

  // Mental health issues with translations and emojis
  const mentalIssues = {
    stress: {
      en: 'Stress & Anxiety',
      hi: 'рддрдирд╛рд╡ рдФрд░ рдЪрд┐рдВрддрд╛',
      ta: 'роорой роЕро┤рпБродрпНродроорпН рооро▒рпНро▒рпБроорпН роХро╡ро▓рпИ',
      emoji: 'ЁЯШ░'
    },
    depression: {
      en: 'Depression & Sadness',
      hi: 'рдЕрд╡рд╕рд╛рдж рдФрд░ рдЙрджрд╛рд╕реА',
      ta: 'рооройроЪрпНроЪрпЛро░рпНро╡рпБ рооро▒рпНро▒рпБроорпН родрпБроХрпНроХроорпН',
      emoji: 'ЁЯШФ'
    },
    sleep: {
      en: 'Sleep Disorders',
      hi: 'рдиреАрдВрдж рдХреА рд╕рдорд╕реНрдпрд╛рдПрдВ',
      ta: 'родрпВроХрпНроХрооро┐ройрпНроорпИ рокро┐ро░роЪрпНроЪро┐ройрпИроХро│рпН',
      emoji: 'ЁЯШ┤'
    },
    anger: {
      en: 'Anger Management',
      hi: 'рдЧреБрд╕реНрд╕реЗ рдкрд░ рдирд┐рдпрдВрддреНрд░рдг',
      ta: 'роХрпЛрок роорпЗро▓ро╛рогрпНроорпИ',
      emoji: 'ЁЯШа'
    },
    focus: {
      en: 'Concentration Issues',
      hi: 'рдПрдХрд╛рдЧреНрд░рддрд╛ рдХреА рд╕рдорд╕реНрдпрд╛',
      ta: 'роХро╡ройроорпН роЪрпЖро▓рпБродрпНродрпБро╡родро┐ро▓рпН роЪро┐роХрпНроХро▓рпН',
      emoji: 'ЁЯза'
    },
    relationships: {
      en: 'Relationship Problems',
      hi: 'рд░рд┐рд╢реНрддреЛрдВ рдХреА рд╕рдорд╕реНрдпрд╛рдПрдВ',
      ta: 'роЙро▒ро╡рпБ рокро┐ро░роЪрпНроЪро┐ройрпИроХро│рпН',
      emoji: 'ЁЯТФ'
    }
  };

  // Direct video URLs from Supabase
  const videoUrls = {
    stress: 'https://zpwazjeviszgdjmfjhyj.supabase.co/storage/v1/object/public/videos//Stressed.mp4',
    depression: 'https://zpwazjeviszgdjmfjhyj.supabase.co/storage/v1/object/public/videos//Depressed%20(1).mp4',
    sleep: 'https://zpwazjeviszgdjmfjhyj.supabase.co/storage/v1/object/public/videos//Sleep%20Disorder.mp4',
    anger: 'https://zpwazjeviszgdjmfjhyj.supabase.co/storage/v1/object/public/videos//Anger%20managment%20(1).mp4',
    focus: 'https://zpwazjeviszgdjmfjhyj.supabase.co/storage/v1/object/public/videos//Concentration.mp4'
  };

  // Audio URLs from Supabase
  const audioUrls = [
    'https://zpwazjeviszgdjmfjhyj.supabase.co/storage/v1/object/public/audios//11L-birds_singing_with_b-1751215633449.mp3',
    'https://zpwazjeviszgdjmfjhyj.supabase.co/storage/v1/object/public/audios//11L-Bright,_Glistening_S-1751214343447.mp3',
    'https://zpwazjeviszgdjmfjhyj.supabase.co/storage/v1/object/public/audios//11L-Calming_birdsong_wit-1749984722520.mp3',
    'https://zpwazjeviszgdjmfjhyj.supabase.co/storage/v1/object/public/audios//11L-Consistent_Rainfall_-1751214597901.mp3',
    'https://zpwazjeviszgdjmfjhyj.supabase.co/storage/v1/object/public/audios//11L-Flowing_River_with_S-1751214011911.mp3',
    'https://zpwazjeviszgdjmfjhyj.supabase.co/storage/v1/object/public/audios//11L-Lively_Forest_Birdso-1751214061708.mp3',
    'https://zpwazjeviszgdjmfjhyj.supabase.co/storage/v1/object/public/audios//11L-Lively_Forest_Birdso-1751214067636.mp3',
    'https://zpwazjeviszgdjmfjhyj.supabase.co/storage/v1/object/public/audios//11L-Lively_Forest_Birdso-1751214071378.mp3',
    'https://zpwazjeviszgdjmfjhyj.supabase.co/storage/v1/object/public/audios//11L-Sleep_Inducing_Guide-1751214037132.mp3',
    'https://zpwazjeviszgdjmfjhyj.supabase.co/storage/v1/object/public/audios//11L-Subtle,_Intermittent-1751214766949.mp3',
    'https://zpwazjeviszgdjmfjhyj.supabase.co/storage/v1/object/public/audios//11L-Subtle,_Intermittent-1751214775080.mp3',
    'https://zpwazjeviszgdjmfjhyj.supabase.co/storage/v1/object/public/audios//11L-Theta_Waves_(4-8_Hz)-1751213827684.mp3',
    'https://zpwazjeviszgdjmfjhyj.supabase.co/storage/v1/object/public/audios//11L-waterfall_at_the_sil-1751215522565.mp3'
  ];

  // MindMeld AI suggestions with multimedia content
  const mindMeldSuggestions = {
    stress: {
      en: {
        title: 'Pranayama Breathing for Stress Relief',
        description: 'Ancient breathing techniques proven to reduce cortisol levels and calm the nervous system.',
        steps: [
          'Sit comfortably with spine straight',
          'Close your eyes and breathe naturally',
          'Inhale for 4 counts through nose',
          'Hold breath for 4 counts',
          'Exhale for 6 counts through mouth',
          'Repeat for 10-15 minutes daily'
        ],
        videoTitle: 'Guided Stress Relief Session',
        audioTitle: 'Calming Nature Sounds for Meditation'
      },
      hi: {
        title: 'рддрдирд╛рд╡ рд░рд╛рд╣рдд рдХреЗ рд▓рд┐рдП рдкреНрд░рд╛рдгрд╛рдпрд╛рдо рд╢реНрд╡рд╛рд╕',
        description: 'рдкреНрд░рд╛рдЪреАрди рд╢реНрд╡рд╛рд╕ рддрдХрдиреАрдХреЗрдВ рдЬреЛ рдХреЙрд░реНрдЯрд┐рд╕реЛрд▓ рдХреЗ рд╕реНрддрд░ рдХреЛ рдХрдо рдХрд░рдиреЗ рдФрд░ рддрдВрддреНрд░рд┐рдХрд╛ рддрдВрддреНрд░ рдХреЛ рд╢рд╛рдВрдд рдХрд░рдиреЗ рдореЗрдВ рд╕рд┐рджреНрдз рд╣реИрдВред',
        steps: [
          'рд░реАрдврд╝ рд╕реАрдзреА рдХрд░рдХреЗ рдЖрд░рд╛рдо рд╕реЗ рдмреИрдареЗрдВ',
          'рдЖрдВрдЦреЗрдВ рдмрдВрдж рдХрд░реЗрдВ рдФрд░ рдкреНрд░рд╛рдХреГрддрд┐рдХ рд░реВрдк рд╕реЗ рд╕рд╛рдВрд╕ рд▓реЗрдВ',
          'рдирд╛рдХ рд╕реЗ 4 рдЧрд┐рдирддреА рддрдХ рд╕рд╛рдВрд╕ рд▓реЗрдВ',
          '4 рдЧрд┐рдирддреА рддрдХ рд╕рд╛рдВрд╕ рд░реЛрдХреЗрдВ',
          'рдореБрдВрд╣ рд╕реЗ 6 рдЧрд┐рдирддреА рддрдХ рд╕рд╛рдВрд╕ рдЫреЛрдбрд╝реЗрдВ',
          'рджреИрдирд┐рдХ 10-15 рдорд┐рдирдЯ рддрдХ рджреЛрд╣рд░рд╛рдПрдВ'
        ],
        videoTitle: 'рдирд┐рд░реНрджреЗрд╢рд┐рдд рдкреНрд░рд╛рдгрд╛рдпрд╛рдо рд╕рддреНрд░',
        audioTitle: 'рдзреНрдпрд╛рди рдХреЗ рд▓рд┐рдП рд╢рд╛рдВрдд рдкреНрд░рд╛рдХреГрддрд┐рдХ рдзреНрд╡рдирд┐рдпрд╛рдВ'
      },
      ta: {
        title: 'роорой роЕро┤рпБродрпНродроорпН роирпАроХрпНроХ рокро┐ро░ро╛рогро╛ропро╛роо роЪрпБро╡ро╛роЪроорпН',
        description: 'роХро╛ро░рпНроЯро┐роЪро╛ро▓рпН роЕро│ро╡рпИроХрпН роХрпБро▒рпИродрпНродрпБ роиро░роорпНрокрпБ роорогрпНроЯро▓родрпНродрпИ роЕроорпИродро┐рокрпНрокроЯрпБродрпНрод роиро┐ро░рпВрокро┐роХрпНроХрокрпНрокроЯрпНроЯ рокрогрпНроЯрпИроп роЪрпБро╡ро╛роЪ роирпБроЯрпНрокроЩрпНроХро│рпН.',
        steps: [
          'роорпБродрпБроХрпБродрпНродрогрпНроЯрпБ роирпЗро░ро╛роХ ро╡рпИродрпНродрпБ ро╡роЪродро┐ропро╛роХ роЕрооро░ро╡рпБроорпН',
          'роХрогрпНроХро│рпИ роорпВроЯро┐ роЗропро▒рпНроХрпИропро╛роХ роЪрпБро╡ро╛роЪро┐роХрпНроХро╡рпБроорпН',
          'роорпВроХрпНроХрпБ ро╡ро┤ро┐ропро╛роХ 4 роОрогрпНрогро┐роХрпНроХрпИ ро╡ро░рпИ роорпВроЪрпНроЪрпБ роЗро┤рпБроХрпНроХро╡рпБроорпН',
          '4 роОрогрпНрогро┐роХрпНроХрпИ ро╡ро░рпИ роорпВроЪрпНроЪрпИ роиро┐ро▒рпБродрпНродро╡рпБроорпН',
          'ро╡ро╛ропрпН ро╡ро┤ро┐ропро╛роХ 6 роОрогрпНрогро┐роХрпНроХрпИ ро╡ро░рпИ роорпВроЪрпНроЪрпИ ро╡рпЖро│ро┐ропро┐роЯро╡рпБроорпН',
          'родро┐ройроорпБроорпН 10-15 роиро┐рооро┐роЯроЩрпНроХро│рпН роорпАрогрпНроЯрпБроорпН роЪрпЖропрпНропро╡рпБроорпН'
        ],
        videoTitle: 'ро╡ро┤ро┐роХро╛роЯрпНроЯрокрпНрокроЯрпНроЯ рокро┐ро░ро╛рогро╛ропро╛роо роЕрооро░рпНро╡рпБ',
        audioTitle: 'родро┐ропро╛ройродрпНродро┐ро▒рпНроХро╛рой роЕроорпИродро┐ропро╛рой роЗропро▒рпНроХрпИ роТро▓ро┐роХро│рпН'
      }
    },
    depression: {
      en: {
        title: 'Surya Namaskara (Sun Salutation) for Mood Enhancement',
        description: 'Dynamic yoga sequence that boosts serotonin and endorphin production naturally.',
        steps: [
          'Start in Mountain Pose (Tadasana)',
          'Raise arms overhead (Urdhva Hastasana)',
          'Forward fold (Uttanasana)',
          'Half lift (Ardha Uttanasana)',
          'Low push-up (Chaturanga)',
          'Upward facing dog (Urdhva Mukha)',
          'Downward facing dog (Adho Mukha)',
          'Return to standing'
        ],
        videoTitle: 'Guided Depression Relief Session',
        audioTitle: 'Uplifting Mantras for Positive Energy'
      },
      hi: {
        title: 'рдореВрдб рдмреЗрд╣рддрд░ рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП рд╕реВрд░реНрдп рдирдорд╕реНрдХрд╛рд░',
        description: 'рдЧрддрд┐рд╢реАрд▓ рдпреЛрдЧ рдЕрдиреБрдХреНрд░рдо рдЬреЛ рдкреНрд░рд╛рдХреГрддрд┐рдХ рд░реВрдк рд╕реЗ рд╕реЗрд░реЛрдЯреЛрдирд┐рди рдФрд░ рдПрдВрдбреЛрд░реНрдлрд┐рди рдЙрддреНрдкрд╛рджрди рдХреЛ рдмрдврд╝рд╛рддрд╛ рд╣реИред',
        steps: [
          'рдкрд░реНрд╡рдд рдореБрджреНрд░рд╛ (рддрд╛рдбрд╝рд╛рд╕рди) рдореЗрдВ рд╢реБрд░реВ рдХрд░реЗрдВ',
          'рд╣рд╛рдереЛрдВ рдХреЛ рдКрдкрд░ рдЙрдард╛рдПрдВ (рдКрд░реНрдзреНрд╡ рд╣рд╕реНрддрд╛рд╕рди)',
          'рдЖрдЧреЗ рдХреА рдУрд░ рдЭреБрдХреЗрдВ (рдЙрддреНрддрд╛рдирд╛рд╕рди)',
          'рдЖрдзрд╛ рдЙрдард╛рд╡ (рдЕрд░реНрдз рдЙрддреНрддрд╛рдирд╛рд╕рди)',
          'рдиреАрдЪрд╛ рдкреБрд╢-рдЕрдк (рдЪрддреБрд░рдВрдЧ)',
          'рдКрдкрд░ рдХреА рдУрд░ рдореБрдВрд╣ рд╡рд╛рд▓рд╛ рдХреБрддреНрддрд╛ (рдКрд░реНрдзреНрд╡ рдореБрдЦ)',
          'рдиреАрдЪреЗ рдХреА рдУрд░ рдореБрдВрд╣ рд╡рд╛рд▓рд╛ рдХреБрддреНрддрд╛ (рдЕрдзреЛ рдореБрдЦ)',
          'рдЦрдбрд╝реЗ рд╣реЛрдиреЗ рдХреА рд╕реНрдерд┐рддрд┐ рдореЗрдВ рд╡рд╛рдкрд╕ рдЖрдПрдВ'
        ],
        videoTitle: 'рд╕реБрдмрд╣ рдХрд╛ рд╕реВрд░реНрдп рдирдорд╕реНрдХрд╛рд░ рдкреНрд░рд╡рд╛рд╣',
        audioTitle: 'рд╕рдХрд╛рд░рд╛рддреНрдордХ рдКрд░реНрдЬрд╛ рдХреЗ рд▓рд┐рдП рдЙрддреНрдерд╛рдирдХрд╛рд░реА рдордВрддреНрд░'
      },
      ta: {
        title: 'рооройроиро┐ро▓рпИ роорпЗроорпНрокро╛роЯрпНроЯро┐ро▒рпНроХро╛рой роЪрпВро░рпНроп роирооро╕рпНроХро╛ро░роорпН',
        description: 'роЪрпЖро░рпЛроЯрпЛройро┐ройрпН рооро▒рпНро▒рпБроорпН роОрогрпНроЯрпЛро░рпНрокро┐ройрпН роЙро▒рпНрокродрпНродро┐ропрпИ роЗропро▒рпНроХрпИропро╛роХ роЕродро┐роХро░ро┐роХрпНроХрпБроорпН роЖро▒рпНро▒ро▓рпНрооро┐роХрпНроХ ропрпЛроХро╛ ро╡ро░ро┐роЪрпИ.',
        steps: [
          'рооро▓рпИ рокрпЛро╕ро┐ро▓рпН (родро╛роЯро╛роЪройроорпН) родрпКроЯроЩрпНроХро╡рпБроорпН',
          'роХрпИроХро│рпИ роорпЗро▓рпН роирпЛроХрпНроХро┐ роЙропро░рпНродрпНродро╡рпБроорпН (роКро░рпНродрпНро╡ ро╣ро╕рпНродро╛роЪройроорпН)',
          'роорпБройрпНройрпЛроХрпНроХро┐ роороЯро┐роХрпНроХро╡рпБроорпН (роЙродрпНродро╛ройро╛роЪройроорпН)',
          'роЕро░рпИ роЙропро░рпНродрпНродро▓рпН (роЕро░рпНродрпНрод роЙродрпНродро╛ройро╛роЪройроорпН)',
          'родро╛ро┤рпНро╡ро╛рой рокрпБро╖рпН-роЕрокрпН (роЪродрпБро░роЩрпНроХроорпН)',
          'роорпЗро▓рпНроирпЛроХрпНроХро┐роп роиро╛ропрпН (роКро░рпНродрпНро╡ роорпБроХроорпН)',
          'роХрпАро┤рпНроирпЛроХрпНроХро┐роп роиро╛ропрпН (роЕродрпЛ роорпБроХроорпН)',
          'роиро┐ро▒рпНроХрпБроорпН роиро┐ро▓рпИроХрпНроХрпБ родро┐ро░рпБроорпНрокро╡рпБроорпН'
        ],
        videoTitle: 'роХро╛ро▓рпИ роЪрпВро░рпНроп роирооро╕рпНроХро╛ро░ роУроЯрпНроЯроорпН',
        audioTitle: 'роирпЗро░рпНрооро▒рпИ роЖро▒рпНро▒ро▓рпБроХрпНроХро╛рой роЙро▒рпНроЪро╛роХроорпВроЯрпНроЯрпБроорпН роороирпНродро┐ро░роЩрпНроХро│рпН'
      }
    },
    sleep: {
      en: {
        title: 'Yoga Nidra for Deep Sleep',
        description: 'Guided body scan meditation that activates the parasympathetic nervous system for restful sleep.',
        steps: [
          'Lie down in Savasana (corpse pose)',
          'Close eyes and breathe naturally',
          'Scan body from toes to head',
          'Release tension in each body part',
          'Visualize peaceful imagery',
          'Set positive sleep intentions',
          'Allow natural drift into sleep'
        ],
        videoTitle: 'Sleep Disorder Relief Session',
        audioTitle: 'Sleep-Inducing Binaural Beats'
      },
      hi: {
        title: 'рдЧрд╣рд░реА рдиреАрдВрдж рдХреЗ рд▓рд┐рдП рдпреЛрдЧ рдирд┐рджреНрд░рд╛',
        description: 'рдирд┐рд░реНрджреЗрд╢рд┐рдд рд╢рд░реАрд░ рд╕реНрдХреИрди рдзреНрдпрд╛рди рдЬреЛ рдЖрд░рд╛рдорджрд╛рдпрдХ рдиреАрдВрдж рдХреЗ рд▓рд┐рдП рдкреИрд░рд╛рд╕рд┐рдореНрдкреИрдереЗрдЯрд┐рдХ рддрдВрддреНрд░рд┐рдХрд╛ рддрдВрддреНрд░ рдХреЛ рд╕рдХреНрд░рд┐рдп рдХрд░рддрд╛ рд╣реИред',
        steps: [
          'рд╢рд╡рд╛рд╕рди (рд╢рд╡ рдореБрджреНрд░рд╛) рдореЗрдВ рд▓реЗрдЯ рдЬрд╛рдПрдВ',
          'рдЖрдВрдЦреЗрдВ рдмрдВрдж рдХрд░реЗрдВ рдФрд░ рдкреНрд░рд╛рдХреГрддрд┐рдХ рд░реВрдк рд╕реЗ рд╕рд╛рдВрд╕ рд▓реЗрдВ',
          'рдкреИрд░ рдХреА рдЙрдВрдЧрд▓рд┐рдпреЛрдВ рд╕реЗ рд╕рд┐рд░ рддрдХ рд╢рд░реАрд░ рдХреЛ рд╕реНрдХреИрди рдХрд░реЗрдВ',
          'рд╢рд░реАрд░ рдХреЗ рд╣рд░ рд╣рд┐рд╕реНрд╕реЗ рдореЗрдВ рддрдирд╛рд╡ рдЫреЛрдбрд╝реЗрдВ',
          'рд╢рд╛рдВрддрд┐рдкреВрд░реНрдг рдЪрд┐рддреНрд░реЛрдВ рдХреА рдХрд▓реНрдкрдирд╛ рдХрд░реЗрдВ',
          'рд╕рдХрд╛рд░рд╛рддреНрдордХ рдиреАрдВрдж рдХреЗ рдЗрд░рд╛рджреЗ рд╕реЗрдЯ рдХрд░реЗрдВ',
          'рдкреНрд░рд╛рдХреГрддрд┐рдХ рд░реВрдк рд╕реЗ рдиреАрдВрдж рдореЗрдВ рдЬрд╛рдиреЗ рджреЗрдВ'
        ],
        videoTitle: 'рд╕реЛрдиреЗ рдХреЗ рд╕рдордп рдпреЛрдЧ рдирд┐рджреНрд░рд╛ рд╕рддреНрд░',
        audioTitle: 'рдиреАрдВрдж рд▓рд╛рдиреЗ рд╡рд╛рд▓реА рдмрд╛рдЗрдиреЙрд░рд▓ рдмреАрдЯреНрд╕'
      },
      ta: {
        title: 'роЖро┤рпНроирпНрод родрпВроХрпНроХродрпНродро┐ро▒рпНроХро╛рой ропрпЛроХ роиро┐родрпНро░ро╛',
        description: 'роЕроорпИродро┐ропро╛рой родрпВроХрпНроХродрпНродро┐ро▒рпНроХро╛рой рокро╛ро░ро╛роЪро┐роорпНрокродрпЖроЯро┐роХрпН роиро░роорпНрокрпБ роорогрпНроЯро▓родрпНродрпИ роЪрпЖропро▓рпНрокроЯрпБродрпНродрпБроорпН ро╡ро┤ро┐роХро╛роЯрпНроЯрокрпНрокроЯрпНроЯ роЙроЯро▓рпН ро╕рпНроХрпЗройрпН родро┐ропро╛ройроорпН.',
        steps: [
          'роЪро╡ро╛роЪройродрпНродро┐ро▓рпН (рокро┐рогроорпН рокрпЛро╕рпН) рокроЯрпБроХрпНроХро╡рпБроорпН',
          'роХрогрпНроХро│рпИ роорпВроЯро┐ роЗропро▒рпНроХрпИропро╛роХ роЪрпБро╡ро╛роЪро┐роХрпНроХро╡рпБроорпН',
          'роХро╛ро▓рпН ро╡ро┐ро░ро▓рпНроХро│ро┐ро▓ро┐ро░рпБроирпНродрпБ родро▓рпИ ро╡ро░рпИ роЙроЯро▓рпИ ро╕рпНроХрпЗройрпН роЪрпЖропрпНропро╡рпБроорпН',
          'роЙроЯро▓ро┐ройрпН роТро╡рпНро╡рпКро░рпБ рокроХрпБродро┐ропро┐ро▓рпБроорпН рокродро▒рпНро▒родрпНродрпИ ро╡ро┐роЯрпБро╡ро┐роХрпНроХро╡рпБроорпН',
          'роЕроорпИродро┐ропро╛рой рокроЯроЩрпНроХро│рпИ роХро▒рпНрокройрпИ роЪрпЖропрпНропро╡рпБроорпН',
          'роирпЗро░рпНрооро▒рпИ родрпВроХрпНроХ роирпЛроХрпНроХроЩрпНроХро│рпИ роЕроорпИроХрпНроХро╡рпБроорпН',
          'роЗропро▒рпНроХрпИропро╛роХ родрпВроХрпНроХродрпНродро┐ро▓рпН роЪрпЖро▓рпНро▓ роЕройрпБроородро┐роХрпНроХро╡рпБроорпН'
        ],
        videoTitle: 'рокроЯрпБроХрпНроХрпИ роирпЗро░ ропрпЛроХ роиро┐родрпНро░ро╛ роЕрооро░рпНро╡рпБ',
        audioTitle: 'родрпВроХрпНроХродрпНродрпИ родрпВрогрпНроЯрпБроорпН рокрпИройро╛ро░ро▓рпН рокрпАроЯрпНро╕рпН'
      }
    },
    anger: {
      en: {
        title: 'Cooling Pranayama (Sheetali) for Anger Management',
        description: 'Cooling breath technique that reduces body heat and calms aggressive emotions.',
        steps: [
          'Sit in comfortable meditation pose',
          'Curl tongue into tube shape',
          'Inhale slowly through curled tongue',
          'Close mouth and hold breath briefly',
          'Exhale slowly through nose',
          'Feel cooling sensation throughout body',
          'Practice for 5-10 minutes when angry'
        ],
        videoTitle: 'Anger Management Session',
        audioTitle: 'Peaceful Water Sounds for Cooling'
      },
      hi: {
        title: 'рдЧреБрд╕реНрд╕реЗ рдХреЗ рдкреНрд░рдмрдВрдзрди рдХреЗ рд▓рд┐рдП рд╢реАрддрд▓реА рдкреНрд░рд╛рдгрд╛рдпрд╛рдо',
        description: 'рд╢реАрддрд▓рди рд╢реНрд╡рд╛рд╕ рддрдХрдиреАрдХ рдЬреЛ рд╢рд░реАрд░ рдХреА рдЧрд░реНрдореА рдХреЛ рдХрдо рдХрд░рддреА рд╣реИ рдФрд░ рдЖрдХреНрд░рд╛рдордХ рднрд╛рд╡рдирд╛рдУрдВ рдХреЛ рд╢рд╛рдВрдд рдХрд░рддреА рд╣реИред',
        steps: [
          'рдЖрд░рд╛рдорджрд╛рдпрдХ рдзреНрдпрд╛рди рдореБрджреНрд░рд╛ рдореЗрдВ рдмреИрдареЗрдВ',
          'рдЬреАрдн рдХреЛ рдЯреНрдпреВрдм рдХреЗ рдЖрдХрд╛рд░ рдореЗрдВ рдореЛрдбрд╝реЗрдВ',
          'рдореБрдбрд╝реА рд╣реБрдИ рдЬреАрдн рд╕реЗ рдзреАрд░реЗ-рдзреАрд░реЗ рд╕рд╛рдВрд╕ рд▓реЗрдВ',
          'рдореБрдВрд╣ рдмрдВрдж рдХрд░реЗрдВ рдФрд░ рдереЛрдбрд╝реА рджреЗрд░ рд╕рд╛рдВрд╕ рд░реЛрдХреЗрдВ',
          'рдирд╛рдХ рд╕реЗ рдзреАрд░реЗ-рдзреАрд░реЗ рд╕рд╛рдВрд╕ рдЫреЛрдбрд╝реЗрдВ',
          'рдкреВрд░реЗ рд╢рд░реАрд░ рдореЗрдВ рдардВрдбрдХ рдХреА рдЕрдиреБрднреВрддрд┐ рдХрд░реЗрдВ',
          'рдЧреБрд╕реНрд╕реЗ рдХреЗ рд╕рдордп 5-10 рдорд┐рдирдЯ рддрдХ рдЕрднреНрдпрд╛рд╕ рдХрд░реЗрдВ'
        ],
        videoTitle: 'рдЧреБрд╕реНрд╕рд╛ рдкреНрд░рдмрдВрдзрди рдпреЛрдЧ рдкреНрд░рд╡рд╛рд╣',
        audioTitle: 'рдардВрдбрдХ рдХреЗ рд▓рд┐рдП рд╢рд╛рдВрддрд┐рдкреВрд░реНрдг рдкрд╛рдиреА рдХреА рдЖрд╡рд╛рдЬрд╝реЗрдВ'
      },
      ta: {
        title: 'роХрпЛрок роорпЗро▓ро╛рогрпНроорпИроХрпНроХро╛рой роХрпБро│ро┐ро░рпНроЪрпНроЪро┐ рокро┐ро░ро╛рогро╛ропро╛роороорпН (роЪрпАродро▓ро┐)',
        description: 'роЙроЯро▓рпН ро╡рпЖрокрпНрокродрпНродрпИ роХрпБро▒рпИродрпНродрпБ роЖроХрпНроХро┐ро░рооро┐рокрпНрокрпБ роЙрогро░рпНро╡рпБроХро│рпИ роЕроорпИродро┐рокрпНрокроЯрпБродрпНродрпБроорпН роХрпБро│ро┐ро░рпНроЪрпНроЪро┐ роЪрпБро╡ро╛роЪ роирпБроЯрпНрокроорпН.',
        steps: [
          'ро╡роЪродро┐ропро╛рой родро┐ропро╛рой роиро┐ро▓рпИропро┐ро▓рпН роЕрооро░ро╡рпБроорпН',
          'роиро╛роХрпНроХрпИ роХрпБро┤ро╛ропрпН ро╡роЯро┐ро╡ро┐ро▓рпН роЪрпБро░рпБроЯрпНроЯро╡рпБроорпН',
          'роЪрпБро░рпБроЯрпНроЯро┐роп роиро╛роХрпНроХрпБ ро╡ро┤ро┐ропро╛роХ роорпЖродрпБро╡ро╛роХ роорпВроЪрпНроЪрпБ роЗро┤рпБроХрпНроХро╡рпБроорпН',
          'ро╡ро╛ропрпИ роорпВроЯро┐ роЪро┐ро▒ро┐родрпБ роирпЗро░роорпН роорпВроЪрпНроЪрпИ роиро┐ро▒рпБродрпНродро╡рпБроорпН',
          'роорпВроХрпНроХрпБ ро╡ро┤ро┐ропро╛роХ роорпЖродрпБро╡ро╛роХ роорпВроЪрпНроЪрпИ ро╡рпЖро│ро┐ропро┐роЯро╡рпБроорпН',
          'роЙроЯро▓рпН роорпБро┤рпБро╡родрпБроорпН роХрпБро│ро┐ро░рпНроЪрпНроЪро┐ роЙрогро░рпНро╡рпИ роЙрогро░ро╡рпБроорпН',
          'роХрпЛрокрооро╛рой рокрпЛродрпБ 5-10 роиро┐рооро┐роЯроЩрпНроХро│рпН рокропро┐ро▒рпНроЪро┐ роЪрпЖропрпНропро╡рпБроорпН'
        ],
        videoTitle: 'роХрпЛрок роорпЗро▓ро╛рогрпНроорпИ ропрпЛроХро╛ роУроЯрпНроЯроорпН',
        audioTitle: 'роХрпБро│ро┐ро░рпНроЪрпНроЪро┐роХрпНроХро╛рой роЕроорпИродро┐ропро╛рой роирпАро░рпН роТро▓ро┐роХро│рпН'
      }
    },
    focus: {
      en: {
        title: 'Trataka (Candle Gazing) for Enhanced Concentration',
        description: 'Ancient meditation technique that strengthens focus and improves mental clarity.',
        steps: [
          'Light a candle 3 feet away',
          'Sit comfortably with spine straight',
          'Gaze at flame without blinking',
          'When eyes water, close them',
          'Visualize flame in mind\'s eye',
          'Open eyes and repeat process',
          'Practice for 10-20 minutes daily'
        ],
        videoTitle: 'Concentration Enhancement Session',
        audioTitle: 'Focus-Enhancing Binaural Frequencies'
      },
      hi: {
        title: 'рдмреЗрд╣рддрд░ рдПрдХрд╛рдЧреНрд░рддрд╛ рдХреЗ рд▓рд┐рдП рддреНрд░рд╛рдЯрдХ (рдореЛрдордмрддреНрддреА рджреЗрдЦрдирд╛)',
        description: 'рдкреНрд░рд╛рдЪреАрди рдзреНрдпрд╛рди рддрдХрдиреАрдХ рдЬреЛ рдлреЛрдХрд╕ рдХреЛ рдордЬрдмреВрдд рдХрд░рддреА рд╣реИ рдФрд░ рдорд╛рдирд╕рд┐рдХ рд╕реНрдкрд╖реНрдЯрддрд╛ рдореЗрдВ рд╕реБрдзрд╛рд░ рдХрд░рддреА рд╣реИред',
        steps: [
          '3 рдлреАрдЯ рджреВрд░ рдореЛрдордмрддреНрддреА рдЬрд▓рд╛рдПрдВ',
          'рд░реАрдврд╝ рд╕реАрдзреА рдХрд░рдХреЗ рдЖрд░рд╛рдо рд╕реЗ рдмреИрдареЗрдВ',
          'рдмрд┐рдирд╛ рдкрд▓рдХ рдЭрдкрдХрд╛рдП рд▓реМ рдХреЛ рджреЗрдЦреЗрдВ',
          'рдЬрдм рдЖрдВрдЦреЛрдВ рдореЗрдВ рдкрд╛рдиреА рдЖрдП рддреЛ рдЙрдиреНрд╣реЗрдВ рдмрдВрдж рдХрд░реЗрдВ',
          'рдорди рдХреА рдЖрдВрдЦ рдореЗрдВ рд▓реМ рдХреА рдХрд▓реНрдкрдирд╛ рдХрд░реЗрдВ',
          'рдЖрдВрдЦреЗрдВ рдЦреЛрд▓реЗрдВ рдФрд░ рдкреНрд░рдХреНрд░рд┐рдпрд╛ рджреЛрд╣рд░рд╛рдПрдВ',
          'рджреИрдирд┐рдХ 10-20 рдорд┐рдирдЯ рддрдХ рдЕрднреНрдпрд╛рд╕ рдХрд░реЗрдВ'
        ],
        videoTitle: 'рдПрдХрд╛рдЧреНрд░рддрд╛ рд╡реГрджреНрдзрд┐ рдзреНрдпрд╛рди',
        audioTitle: 'рдлреЛрдХрд╕ рдмрдврд╝рд╛рдиреЗ рд╡рд╛рд▓реА рдмрд╛рдЗрдиреЙрд░рд▓ рдЖрд╡реГрддреНрддрд┐рдпрд╛рдВ'
      },
      ta: {
        title: 'роорпЗроорпНрокроЯрпНроЯ роХро╡ройродрпНродро┐ро▒рпНроХро╛рой родро┐ро░ро╛роЯроХроорпН (роорпЖро┤рпБроХрпБро╡ро░рпНродрпНродро┐ рокро╛ро░рпНродрпНродро▓рпН)',
        description: 'роХро╡ройродрпНродрпИ ро╡ро▓рпБрокрпНрокроЯрпБродрпНродро┐ роорой родрпЖро│ро┐ро╡рпИ роорпЗроорпНрокроЯрпБродрпНродрпБроорпН рокрогрпНроЯрпИроп родро┐ропро╛рой роирпБроЯрпНрокроорпН.',
        steps: [
          '3 роЕроЯро┐ родрпВро░родрпНродро┐ро▓рпН роорпЖро┤рпБроХрпБро╡ро░рпНродрпНродро┐ роПро▒рпНро▒ро╡рпБроорпН',
          'роорпБродрпБроХрпБродрпНродрогрпНроЯрпБ роирпЗро░ро╛роХ ро╡рпИродрпНродрпБ ро╡роЪродро┐ропро╛роХ роЕрооро░ро╡рпБроорпН',
          'роХрогрпН роЪро┐рооро┐роЯрпНроЯро╛рооро▓рпН роЪрпБроЯро░рпИрокрпН рокро╛ро░рпБроЩрпНроХро│рпН',
          'роХрогрпНроХро│ро┐ро▓рпН роирпАро░рпН ро╡ро░рпБроорпНрокрпЛродрпБ роЕро╡ро▒рпНро▒рпИ роорпВроЯро╡рпБроорпН',
          'рооройроХрпН роХрогрпНрогро┐ро▓рпН роЪрпБроЯро░рпИ роХро▒рпНрокройрпИ роЪрпЖропрпНропро╡рпБроорпН',
          'роХрогрпНроХро│рпИродрпН родро┐ро▒роирпНродрпБ роЪрпЖропро▓рпНроорпБро▒рпИропрпИ роорпАрогрпНроЯрпБроорпН роЪрпЖропрпНропро╡рпБроорпН',
          'родро┐ройроорпБроорпН 10-20 роиро┐рооро┐роЯроЩрпНроХро│рпН рокропро┐ро▒рпНроЪро┐ роЪрпЖропрпНропро╡рпБроорпН'
        ],
        videoTitle: 'роХро╡рой роорпЗроорпНрокро╛роЯрпНроЯрпБ родро┐ропро╛ройроорпН',
        audioTitle: 'роХро╡ройродрпНродрпИ роорпЗроорпНрокроЯрпБродрпНродрпБроорпН рокрпИройро╛ро░ро▓рпН роЕродро┐ро░рпНро╡рпЖрогрпНроХро│рпН'
      }
    },
    relationships: {
      en: {
        title: 'Loving-Kindness Meditation for Better Relationships',
        description: 'Heart-opening practice that cultivates compassion and improves interpersonal connections.',
        steps: [
          'Sit quietly and close your eyes',
          'Place hand on heart center',
          'Send love to yourself first',
          'Extend love to loved ones',
          'Include difficult people',
          'Embrace all beings with compassion',
          'Feel universal connection and peace'
        ],
        videoTitle: 'Relationship Healing Session',
        audioTitle: 'Healing Heart Chakra Frequencies'
      },
      hi: {
        title: 'рдмреЗрд╣рддрд░ рд░рд┐рд╢реНрддреЛрдВ рдХреЗ рд▓рд┐рдП рдкреНрд░реЗрдо-рджрдпрд╛ рдзреНрдпрд╛рди',
        description: 'рд╣реГрджрдп рдЦреЛрд▓рдиреЗ рд╡рд╛рд▓рд╛ рдЕрднреНрдпрд╛рд╕ рдЬреЛ рдХрд░реБрдгрд╛ рд╡рд┐рдХрд╕рд┐рдд рдХрд░рддрд╛ рд╣реИ рдФрд░ рдкрд╛рд░рд╕реНрдкрд░рд┐рдХ рд╕рдВрдмрдВрдзреЛрдВ рдореЗрдВ рд╕реБрдзрд╛рд░ рдХрд░рддрд╛ рд╣реИред',
        steps: [
          'рдЪреБрдкрдЪрд╛рдк рдмреИрдареЗрдВ рдФрд░ рдЖрдВрдЦреЗрдВ рдмрдВрдж рдХрд░реЗрдВ',
          'рд╣реГрджрдп рдХреЗрдВрджреНрд░ рдкрд░ рд╣рд╛рде рд░рдЦреЗрдВ',
          'рдкрд╣рд▓реЗ рдЕрдкрдиреЗ рд▓рд┐рдП рдкреНрд░реЗрдо рднреЗрдЬреЗрдВ',
          'рдкреНрд░рд┐рдпрдЬрдиреЛрдВ рддрдХ рдкреНрд░реЗрдо рдмрдврд╝рд╛рдПрдВ',
          'рдХрдард┐рди рд▓реЛрдЧреЛрдВ рдХреЛ рд╢рд╛рдорд┐рд▓ рдХрд░реЗрдВ',
          'рд╕рднреА рдкреНрд░рд╛рдгрд┐рдпреЛрдВ рдХреЛ рдХрд░реБрдгрд╛ рд╕реЗ рдЧрд▓реЗ рд▓рдЧрд╛рдПрдВ',
          'рд╕рд╛рд░реНрд╡рднреМрдорд┐рдХ рд╕рдВрдмрдВрдз рдФрд░ рд╢рд╛рдВрддрд┐ рдорд╣рд╕реВрд╕ рдХрд░реЗрдВ'
        ],
        videoTitle: 'рд░рд┐рд╢реНрддреЛрдВ рдХреЗ рд▓рд┐рдП рд╣реГрджрдп рдЦреЛрд▓рдиреЗ рд╡рд╛рд▓рд╛ рдпреЛрдЧ',
        audioTitle: 'рд╣реГрджрдп рдЪрдХреНрд░ рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдЖрд╡реГрддреНрддрд┐рдпрд╛рдВ'
      },
      ta: {
        title: 'роЪро┐ро▒роирпНрод роЙро▒ро╡рпБроХро│рпБроХрпНроХро╛рой роЕройрпНрокрпБ-роХро░рпБрогрпИ родро┐ропро╛ройроорпН',
        description: 'роЗро░роХрпНроХродрпНродрпИ ро╡ро│ро░рпНродрпНродрпБ родройро┐роирокро░рпН родрпКроЯро░рпНрокрпБроХро│рпИ роорпЗроорпНрокроЯрпБродрпНродрпБроорпН роЗродроп родро┐ро▒роХрпНроХрпБроорпН рокропро┐ро▒рпНроЪро┐.',
        steps: [
          'роЕроорпИродро┐ропро╛роХ роЕрооро░рпНроирпНродрпБ роХрогрпНроХро│рпИ роорпВроЯро╡рпБроорпН',
          'роЗродроп роорпИропродрпНродро┐ро▓рпН роХрпИропрпИ ро╡рпИроХрпНроХро╡рпБроорпН',
          'роорпБродро▓ро┐ро▓рпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роЕройрпНрокрпБ роЕройрпБрокрпНрокро╡рпБроорпН',
          'роЕройрпНрокрпБроХрпНроХрпБро░ро┐ропро╡ро░рпНроХро│рпБроХрпНроХрпБ роЕройрпНрокрпИ роирпАроЯрпНроЯро╡рпБроорпН',
          'роХроЯро┐ройрооро╛рой роороХрпНроХро│рпИ роЪрпЗро░рпНроХрпНроХро╡рпБроорпН',
          'роЕройрпИродрпНродрпБ роЙропро┐ро░ро┐ройроЩрпНроХро│рпИропрпБроорпН роЗро░роХрпНроХродрпНродрпБроЯройрпН роЕрогрпИроХрпНроХро╡рпБроорпН',
          'роЙро▓роХро│ро╛ро╡ро┐роп родрпКроЯро░рпНрокрпБ рооро▒рпНро▒рпБроорпН роЕроорпИродро┐ропрпИ роЙрогро░ро╡рпБроорпН'
        ],
        videoTitle: 'роЙро▒ро╡рпБроХро│рпБроХрпНроХро╛рой роЗродроп родро┐ро▒роХрпНроХрпБроорпН ропрпЛроХро╛',
        audioTitle: 'роХрпБрогрокрпНрокроЯрпБродрпНродрпБроорпН роЗродроп роЪроХрпНро░ роЕродро┐ро░рпНро╡рпЖрогрпНроХро│рпН'
      }
    }
  };

  useEffect(() => {
    // Check for user authentication
    const checkUser = async () => {
      if (!isSupabaseConfigured()) return;
      
      const { data: { user } } = await supabase.auth.getUser();
      setUser(user);
    };

    checkUser();

    // Listen for auth changes
    if (isSupabaseConfigured()) {
      const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {
        setUser(session?.user ?? null);
      });

      return () => subscription.unsubscribe();
    }
  }, []);

  useEffect(() => {
    // Load saved sessions for authenticated users
    if (user && isSupabaseConfigured()) {
      loadSavedSessions();
    }
  }, [user]);

  const loadSavedSessions = async () => {
    try {
      const { data, error } = await supabase
        .from('mental_health_sessions')
        .select('*')
        .eq('user_id', user.id)
        .order('created_at', { ascending: false })
        .limit(10);

      if (error) throw error;
      setSavedSessions(data || []);
    } catch (error) {
      console.error('Error loading saved sessions:', error);
    }
  };

  // Helper function to clean and validate URLs
  const cleanUrl = (url) => {
    if (!url) return '';
    
    // Remove double slashes except after protocol
    const cleaned = url.replace(/([^:]\/)\/+/g, '$1');
    
    console.log('ЁЯз╣ URL cleaning:', {
      original: url,
      cleaned: cleaned
    });
    
    return cleaned;
  };

  const fetchMediaContent = async (issueType, language) => {
    if (!isSupabaseConfigured()) return null;

    setIsMediaLoading(true);
    try {
      console.log(`ЁЯФН Fetching media for issue: "${issueType}", language: "${language}"`);
      console.log('ЁЯУК Database query details:', {
        table: 'mental_health_relief',
        filters: {
          issue_type: issueType,
          language: language
        }
      });
      
      // First, let's check what data exists in the table
      const { data: allData, error: allError } = await supabase
        .from('mental_health_relief')
        .select('*');
      
      if (allError) {
        console.error('тЭМ Error fetching all data:', allError);
      } else {
        console.log('ЁЯУЛ All available data in mental_health_relief table:', allData);
        console.log('ЁЯФв Total records found:', allData?.length || 0);
        
        if (allData && allData.length > 0) {
          console.log('ЁЯУЭ Available issue types:', [...new Set(allData.map(item => item.issue_type))]);
          console.log('ЁЯМР Available languages:', [...new Set(allData.map(item => item.language))]);
        }
      }

      // Now try to fetch the specific record - modified to handle multiple rows
      const { data, error } = await supabase
        .from('mental_health_relief')
        .select('*')
        .eq('issue_type', issueType)
        .eq('language', language);

      if (error) {
        console.error('тЭМ Error fetching specific media content:', error);
        console.log('ЁЯФН Query that failed:', {
          issue_type: issueType,
          language: language
        });
        return null;
      }

      console.log('тЬЕ Query result for specific content:', data);
      
      // Handle the case where data is an array
      let selectedData = null;
      if (data && Array.isArray(data) && data.length > 0) {
        // Use the first matching record if multiple exist
        selectedData = data[0];
        
        if (data.length > 1) {
          console.warn(`тЪая╕П Multiple records found for issue_type: "${issueType}" and language: "${language}". Using the first one. Consider removing duplicates from the database.`);
          console.log('ЁЯФв Number of duplicate records:', data.length);
        }
        
        console.log('ЁЯОе Video URL from database:', selectedData.video_url);
        console.log('ЁЯО╡ Audio URL from database:', selectedData.audio_url);
        console.log('ЁЯУЭ Title from database:', selectedData.title);
        console.log('ЁЯУД Description from database:', selectedData.description);
        console.log('ЁЯУЛ Steps from database:', selectedData.steps);
        
        // Clean the URLs
        if (selectedData.video_url) {
          selectedData.video_url = cleanUrl(selectedData.video_url);
          console.log('ЁЯз╣ Cleaned video URL:', selectedData.video_url);
        }
        if (selectedData.audio_url) {
          selectedData.audio_url = cleanUrl(selectedData.audio_url);
          console.log('ЁЯз╣ Cleaned audio URL:', selectedData.audio_url);
        }
      } else {
        console.log('тЪая╕П No content found for this issue type and language combination');
        console.log('ЁЯТб Suggestion: Check if the enum values match exactly');
      }
      
      return selectedData;
    } catch (error) {
      console.error('ЁЯТе Unexpected error fetching media content:', error);
      return null;
    } finally {
      setIsMediaLoading(false);
    }
  };

  const saveSession = async (issue, suggestion) => {
    if (!user || !isSupabaseConfigured()) return;

    try {
      await supabase
        .from('mental_health_sessions')
        .insert({
          user_id: user.id,
          issue_type: issue,
          suggestion_title: suggestion.title,
          language: i18n.language,
          video_url: currentVideoUrl,
          audio_url: currentAudioUrl
        });
      
      loadSavedSessions();
    } catch (error) {
      console.error('Error saving session:', error);
    }
  };

  const handleIssueSelect = async (issue) => {
    console.log(`ЁЯОп Selected issue: "${issue}" in language: "${i18n.language}"`);
    
    setSelectedIssue(issue);
    setIsLoading(true);
    setMediaContent(null);
    setCurrentVideoUrl('');
    setCurrentAudioUrl('');
    setVideoError('');
    setAudioError('');

    // Set the direct video URL from Supabase
    if (videoUrls[issue]) {
      setCurrentVideoUrl(videoUrls[issue]);
      console.log('ЁЯОе Setting direct video URL:', videoUrls[issue]);
    }

    // Select a random audio URL from the available options
    const randomAudioUrl = audioUrls[Math.floor(Math.random() * audioUrls.length)];
    setCurrentAudioUrl(randomAudioUrl);
    console.log('ЁЯО╡ Setting random audio URL:', randomAudioUrl);

    // Fetch media content from Supabase
    const media = await fetchMediaContent(issue, i18n.language);
    
    // Simulate AI processing delay
    setTimeout(() => {
      const suggestion = mindMeldSuggestions[issue][i18n.language];
      setAiSuggestion(suggestion);
      
      // Use Supabase media URLs if available
      if (media && media.video_url && !videoUrls[issue]) {
        console.log('ЁЯОе Setting video URL from database:', media.video_url);
        setCurrentVideoUrl(media.video_url);
      }
      
      if (media && media.audio_url) {
        console.log('ЁЯО╡ Setting audio URL from database:', media.audio_url);
        setCurrentAudioUrl(media.audio_url);
      }
      
      setMediaContent(media);
      setIsLoading(false);

      // Save session if user is authenticated
      if (user) {
        saveSession(issue, suggestion);
      }
    }, 2000);
  };

  const toggleAudio = () => {
    if (audioRef.current) {
      if (isPlayingAudio) {
        audioRef.current.pause();
      } else {
        console.log('ЁЯО╡ Attempting to play audio:', currentAudioUrl);
        audioRef.current.play().catch(error => {
          console.error('тЭМ Audio play failed:', error);
          setAudioError('Failed to play audio. Please check the audio file.');
        });
      }
      setIsPlayingAudio(!isPlayingAudio);
    }
  };

  const resetSession = () => {
    setSelectedIssue('');
    setAiSuggestion(null);
    setCurrentVideoUrl('');
    setCurrentAudioUrl('');
    setIsPlayingAudio(false);
    setMediaContent(null);
    setIsMediaLoading(false);
    setVideoError('');
    setAudioError('');
  };

  const handleVideoError = (e) => {
    console.error('тЭМ Video failed to load:', e);
    console.log('ЁЯОе Video URL that failed:', currentVideoUrl);
    setVideoError('Failed to load video. Please check the video file format and URL.');
  };

  const handleAudioError = (e) => {
    console.error('тЭМ Audio failed to load:', e);
    console.log('ЁЯО╡ Audio URL that failed:', currentAudioUrl);
    setAudioError('Failed to load audio. Please check the audio file format and URL.');
  };

  const handleVideoLoad = () => {
    console.log('тЬЕ Video loaded successfully:', currentVideoUrl);
    setVideoError('');
  };

  const handleAudioLoad = () => {
    console.log('тЬЕ Audio loaded successfully:', currentAudioUrl);
    setAudioError('');
  };

  return (
    <div className="mental-issue-solution">
      <div className="mental-container">
        {!selectedIssue ? (
          <div className="issue-selection">
            <h1 className="main-title">What's troubling your mind today?</h1>
            <div className="title-underline"></div>
            <p className="selection-instruction">
              Select the mental health concern you're experiencing, and our MindMeld AI will provide personalized solutions:
            </p>
            
            <div className="issues-grid">
              {Object.entries(mentalIssues).map(([key, issue]) => (
                <button
                  key={key}
                  className="issue-card"
                  onClick={() => handleIssueSelect(key)}
                >
                  <div className="issue-emoji">{issue.emoji}</div>
                  <span className="issue-text">{issue[i18n.language]}</span>
                </button>
              ))}
            </div>

            {savedSessions.length > 0 && user && (
              <div className="saved-sessions">
                <h3>{t('recentSessions')}</h3>
                <div className="sessions-list">
                  {savedSessions.map((session) => (
                    <div key={session.id} className="session-item">
                      <span className="session-title">{session.suggestion_title}</span>
                      <span className="session-date">
                        {new Date(session.created_at).toLocaleDateString()}
                      </span>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        ) : (
          <div className="solution-display">
            {isLoading ? (
              <div className="loading-state">
                <div className="mindmeld-logo">ЁЯзатЬи</div>
                <h3>{t('mindMeldAnalyzing')}</h3>
                <div className="loading-spinner"></div>
                <p>{t('analyzingMentalState')}</p>
                {isMediaLoading && (
                  <p style={{ fontSize: '0.9rem', color: '#666', marginTop: '1rem' }}>
                    ЁЯФН Loading personalized content from database...
                  </p>
                )}
              </div>
            ) : (
              aiSuggestion && (
                <div className="ai-suggestion">
                  <div className="suggestion-header">
                    <div className="mindmeld-branding">
                      <span className="mindmeld-logo">ЁЯзатЬи</span>
                      <span className="mindmeld-text">MindMeld AI</span>
                    </div>
                    <button className="reset-btn" onClick={resetSession}>
                      {t('tryAnother')}
                    </button>
                  </div>

                  <div className="suggestion-content">
                    <h2>{mediaContent?.title || aiSuggestion.title}</h2>
                    <p className="suggestion-description">
                      {mediaContent?.description || aiSuggestion.description}
                    </p>

                    <div className="media-section">
                      <div className="video-section">
                        <h3>{t('guidedVideo')}</h3>
                        <div className="tavus-video-container">
                          {currentVideoUrl ? (
                            <div>
                              <video 
                                width="100%" 
                                height="315"
                                controls
                                onError={handleVideoError}
                                onLoadedData={handleVideoLoad}
                                style={{ borderRadius: '10px' }}
                                preload="metadata"
                                crossOrigin="anonymous"
                              >
                                <source src={currentVideoUrl} type="video/mp4" />
                                Your browser does not support the video tag.
                              </video>
                              {!videoError && (
                                <p style={{ fontSize: '0.9rem', color: '#138808', marginTop: '0.5rem' }}>
                                  тЬЕ Personalized video content loaded successfully
                                </p>
                              )}
                              {videoError && (
                                <p style={{ fontSize: '0.9rem', color: '#dc3545', marginTop: '0.5rem' }}>
                                  тЭМ {videoError}
                                </p>
                              )}
                            </div>
                          ) : (
                            <div className="video-placeholder">
                              <div className="video-placeholder-content">
                                <div className="video-icon">ЁЯУ╣</div>
                                <h4>{aiSuggestion.videoTitle}</h4>
                                <p>
                                  {mediaContent 
                                    ? 'Video content not available for this language yet' 
                                    : 'Loading video content...'
                                  }
                                </p>
                                <button className="play-video-btn" disabled>
                                  тЦ╢я╕П {t('playVideo')}
                                </button>
                              </div>
                            </div>
                          )}
                        </div>
                      </div>

                      <div className="audio-section">
                        <h3>{t('healingAudio')}</h3>
                        <div className="elevenlabs-audio-container">
                          <div className="audio-player">
                            <div className="audio-info">
                              <span className="audio-title">{aiSuggestion.audioTitle}</span>
                              <span className="elevenlabs-badge">ЁЯО╡ Healing Sounds</span>
                            </div>
                            <button 
                              className={`audio-control-btn ${isPlayingAudio ? 'playing' : ''}`}
                              onClick={toggleAudio}
                              disabled={!currentAudioUrl}
                            >
                              {isPlayingAudio ? 'тП╕я╕П' : 'тЦ╢я╕П'}
                            </button>
                          </div>
                          {currentAudioUrl ? (
                            <div>
                              <audio 
                                ref={audioRef}
                                onEnded={() => setIsPlayingAudio(false)}
                                onError={handleAudioError}
                                onLoadedData={handleAudioLoad}
                                preload="metadata"
                                crossOrigin="anonymous"
                                loop
                              >
                                <source src={currentAudioUrl} type="audio/mpeg" />
                                Your browser does not support the audio element.
                              </audio>
                              {!audioError && (
                                <p style={{ fontSize: '0.9rem', color: '#138808', marginTop: '0.5rem' }}>
                                  тЬЕ Healing audio content loaded successfully
                                </p>
                              )}
                              {audioError && (
                                <p style={{ fontSize: '0.9rem', color: '#dc3545', marginTop: '0.5rem' }}>
                                  тЭМ {audioError}
                                </p>
                              )}
                            </div>
                          ) : (
                            <p style={{ fontSize: '0.9rem', color: '#666', marginTop: '0.5rem' }}>
                              {mediaContent 
                                ? 'Audio content not available for this language yet' 
                                : 'Audio content loading...'
                              }
                            </p>
                          )}
                        </div>
                      </div>
                    </div>

                    <div className="steps-section">
                      <h3>{t('stepByStepGuide')}</h3>
                      <ol className="steps-list">
                        {(mediaContent?.steps ? JSON.parse(mediaContent.steps) : aiSuggestion.steps).map((step, index) => (
                          <li key={index} className="step-item">
                            <span className="step-number">{index + 1}</span>
                            <span className="step-text">{step}</span>
                          </li>
                        ))}
                      </ol>
                    </div>

                    <div className="action-buttons">
                      <button className="primary-btn" onClick={() => saveSession(selectedIssue, aiSuggestion)}>
                        ЁЯТ╛ {t('saveSession')}
                      </button>
                      <button className="secondary-btn" onClick={resetSession}>
                        ЁЯФД {t('tryAnother')}
                      </button>
                    </div>
                  </div>
                </div>
              )
            )}
          </div>
        )}
      </div>
    </div>
  );
}

export default MentalIssueSolution;