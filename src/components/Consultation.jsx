import { useState, useEffect, useRef } from 'react';
import { useTranslation } from 'react-i18next';
import { supabase, isSupabaseConfigured } from '../lib/supabase';

function Consultation({ appointmentData, onConsultationEnd }) {
  const { t, i18n } = useTranslation();
  const [user, setUser] = useState(null);
  const [consultationStatus, setConsultationStatus] = useState('waiting'); // waiting, connecting, active, ended
  const [isVideoEnabled, setIsVideoEnabled] = useState(true);
  const [isAudioEnabled, setIsAudioEnabled] = useState(true);
  const [chatMessages, setChatMessages] = useState([]);
  const [chatInput, setChatInput] = useState('');
  const [consultationTime, setConsultationTime] = useState(0);
  const [showAffirmations, setShowAffirmations] = useState(false);
  const [currentAffirmation, setCurrentAffirmation] = useState(0);
  const videoRef = useRef(null);
  const timerRef = useRef(null);

  // Positive affirmations in multiple languages
  const affirmations = {
    en: [
      "You're brave for seeking help! ЁЯТк",
      "Your health matters and you're taking the right steps! ЁЯМЯ",
      "You're stronger than you think! ЁЯТЪ",
      "Taking care of yourself is an act of courage! ЁЯжЛ",
      "You're not alone in this journey! ЁЯдЭ",
      "Every step towards health is a victory! ЁЯПЖ",
      "You're doing great by prioritizing your wellbeing! тЬи",
      "Your commitment to health is inspiring! ЁЯМИ"
    ],
    hi: [
      "рдорджрдж рдорд╛рдВрдЧрдиреЗ рдХреЗ рд▓рд┐рдП рдЖрдк рдмрд╣рд╛рджреБрд░ рд╣реИрдВ! ЁЯТк",
      "рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╣реИ рдФрд░ рдЖрдк рд╕рд╣реА рдХрджрдо рдЙрдард╛ рд░рд╣реЗ рд╣реИрдВ! ЁЯМЯ",
      "рдЖрдк рдЕрдкрдиреЗ рд╡рд┐рдЪрд╛рд░ рд╕реЗ рдХрд╣реАрдВ рдЕрдзрд┐рдХ рдордЬрдмреВрдд рд╣реИрдВ! ЁЯТЪ",
      "рдЕрдкрдирд╛ рдЦреНрдпрд╛рд▓ рд░рдЦрдирд╛ рд╕рд╛рд╣рд╕ рдХрд╛ рдХрд╛рдо рд╣реИ! ЁЯжЛ",
      "рдЗрд╕ рдпрд╛рддреНрд░рд╛ рдореЗрдВ рдЖрдк рдЕрдХреЗрд▓реЗ рдирд╣реАрдВ рд╣реИрдВ! ЁЯдЭ",
      "рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХреА рджрд┐рд╢рд╛ рдореЗрдВ рд╣рд░ рдХрджрдо рдПрдХ рдЬреАрдд рд╣реИ! ЁЯПЖ",
      "рдЕрдкрдиреА рднрд▓рд╛рдИ рдХреЛ рдкреНрд░рд╛рдердорд┐рдХрддрд╛ рджреЗрдХрд░ рдЖрдк рдмрд╣реБрдд рдЕрдЪреНрдЫрд╛ рдХрд░ рд░рд╣реЗ рд╣реИрдВ! тЬи",
      "рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХреЗ рдкреНрд░рддрд┐ рдЖрдкрдХреА рдкреНрд░рддрд┐рдмрджреНрдзрддрд╛ рдкреНрд░реЗрд░рдгрд╛рджрд╛рдпрдХ рд╣реИ! ЁЯМИ"
    ],
    ta: [
      "роЙродро╡ро┐ роХрпЗроЯрпНрокродро▒рпНроХрпБ роирпАроЩрпНроХро│рпН родрпИро░ро┐ропроЪро╛ро▓ро┐! ЁЯТк",
      "роЙроЩрпНроХро│рпН роЖро░рпЛроХрпНроХро┐ропроорпН роорпБроХрпНроХро┐ропроорпН, роирпАроЩрпНроХро│рпН роЪро░ро┐ропро╛рой рокроЯро┐роХро│рпИ роОроЯрпБроХрпНроХро┐ро▒рпАро░рпНроХро│рпН! ЁЯМЯ",
      "роирпАроЩрпНроХро│рпН роиро┐ройрпИрокрпНрокродрпИ ро╡ро┐роЯ ро╡ро▓ро┐роорпИропро╛ройро╡ро░рпН! ЁЯТЪ",
      "роЙроЩрпНроХро│рпИ роХро╡ройро┐родрпНродрпБроХрпНроХрпКро│рпНро╡родрпБ родрпИро░ро┐ропрооро╛рой роЪрпЖропро▓рпН! ЁЯжЛ",
      "роЗроирпНрод рокропрогродрпНродро┐ро▓рпН роирпАроЩрпНроХро│рпН родройро┐ропро╛роХ роЗро▓рпНро▓рпИ! ЁЯдЭ",
      "роЖро░рпЛроХрпНроХро┐ропродрпНродрпИ роирпЛроХрпНроХро┐роп роТро╡рпНро╡рпКро░рпБ роЕроЯро┐ропрпБроорпН ро╡рпЖро▒рпНро▒ро┐! ЁЯПЖ",
      "роЙроЩрпНроХро│рпН роиро▓рпНро╡ро╛ро┤рпНро╡рпБроХрпНроХрпБ роорпБройрпНройрпБро░ро┐роорпИ роХрпКроЯрпБрокрпНрокродро┐ро▓рпН роирпАроЩрпНроХро│рпН роЪро┐ро▒рокрпНрокро╛роХ роЪрпЖропро▓рпНрокроЯрпБроХро┐ро▒рпАро░рпНроХро│рпН! тЬи",
      "роЖро░рпЛроХрпНроХро┐ропродрпНродро┐ро▒рпНроХро╛рой роЙроЩрпНроХро│рпН роЕро░рпНрокрпНрокрогро┐рокрпНрокрпБ роКроХрпНроХрооро│ро┐роХрпНроХро┐ро▒родрпБ! ЁЯМИ"
    ]
  };

  // Sample chat messages for demonstration
  const initialMessages = [
    {
      id: 1,
      sender: 'doctor',
      message: 'Hello! I can see you\'ve joined the consultation. How are you feeling today?',
      timestamp: new Date()
    },
    {
      id: 2,
      sender: 'system',
      message: 'Dr. ' + (appointmentData?.doctor?.name || 'Doctor') + ' has joined the consultation',
      timestamp: new Date()
    }
  ];

  useEffect(() => {
    // Check for user authentication
    const checkUser = async () => {
      if (!isSupabaseConfigured()) return;
      
      const { data: { user } } = await supabase.auth.getUser();
      setUser(user);
    };

    checkUser();

    // Initialize consultation
    initializeConsultation();

    return () => {
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
    };
  }, []);

  useEffect(() => {
    // Show affirmations periodically during consultation
    if (consultationStatus === 'active') {
      const affirmationInterval = setInterval(() => {
        setShowAffirmations(true);
        setCurrentAffirmation(prev => 
          (prev + 1) % affirmations[i18n.language].length
        );
        
        // Hide affirmation after 3 seconds
        setTimeout(() => setShowAffirmations(false), 3000);
      }, 30000); // Show every 30 seconds

      return () => clearInterval(affirmationInterval);
    }
  }, [consultationStatus, i18n.language]);

  const initializeConsultation = async () => {
    try {
      // Simulate connection process
      setConsultationStatus('connecting');
      
      // Initialize chat with welcome messages
      setChatMessages(initialMessages);
      
      // Simulate doctor joining after 3 seconds
      setTimeout(() => {
        setConsultationStatus('active');
        startConsultationTimer();
        
        // Add doctor's welcome message
        const welcomeMessage = {
          id: Date.now(),
          sender: 'doctor',
          message: getWelcomeMessage(),
          timestamp: new Date()
        };
        setChatMessages(prev => [...prev, welcomeMessage]);
        
        // Show first affirmation
        setTimeout(() => {
          setShowAffirmations(true);
          setTimeout(() => setShowAffirmations(false), 3000);
        }, 5000);
        
      }, 3000);
      
    } catch (error) {
      console.error('Error initializing consultation:', error);
    }
  };

  const getWelcomeMessage = () => {
    const messages = {
      en: "Welcome to your consultation! I'm here to help you with your health concerns. Please feel free to share what's bothering you.",
      hi: "рдЖрдкрдХреЗ рдкрд░рд╛рдорд░реНрд╢ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! рдореИрдВ рдЖрдкрдХреА рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рдВрдмрдВрдзреА рдЪрд┐рдВрддрд╛рдУрдВ рдореЗрдВ рдЖрдкрдХреА рдорджрдж рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдБ рд╣реВрдБред рдХреГрдкрдпрд╛ рдмреЗрдЭрд┐рдЭрдХ рдмрддрд╛рдПрдВ рдХрд┐ рдЖрдкрдХреЛ рдХреНрдпрд╛ рдкрд░реЗрд╢рд╛рди рдХрд░ рд░рд╣рд╛ рд╣реИред",
      ta: "роЙроЩрпНроХро│рпН роЖро▓рпЛроЪройрпИроХрпНроХрпБ ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН! роЙроЩрпНроХро│рпН роЪрпБроХро╛родро╛ро░ роХро╡ро▓рпИроХро│ро┐ро▓рпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роЙродро╡ роиро╛ройрпН роЗроЩрпНроХрпЗ роЗро░рпБроХрпНроХро┐ро▒рпЗройрпН. роЙроЩрпНроХро│рпИ роОройрпНрой родрпКроирпНродро░ро╡рпБ роЪрпЖропрпНроХро┐ро▒родрпБ роОройрпНрокродрпИ родропроЩрпНроХро╛рооро▓рпН рокроХро┐ро░рпНроирпНродрпБ роХрпКро│рпНро│рпБроЩрпНроХро│рпН."
    };
    return messages[i18n.language] || messages.en;
  };

  const startConsultationTimer = () => {
    timerRef.current = setInterval(() => {
      setConsultationTime(prev => prev + 1);
    }, 1000);
  };

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  const toggleVideo = () => {
    setIsVideoEnabled(!isVideoEnabled);
    // In a real implementation, this would control the actual video stream
  };

  const toggleAudio = () => {
    setIsAudioEnabled(!isAudioEnabled);
    // In a real implementation, this would control the actual audio stream
  };

  const sendChatMessage = () => {
    if (!chatInput.trim()) return;

    const newMessage = {
      id: Date.now(),
      sender: 'patient',
      message: chatInput,
      timestamp: new Date()
    };

    setChatMessages(prev => [...prev, newMessage]);
    setChatInput('');

    // Simulate doctor response after a delay
    setTimeout(() => {
      const responses = {
        en: [
          "I understand your concern. Can you tell me more about when this started?",
          "Thank you for sharing that. Let me ask you a few more questions.",
          "That's helpful information. Have you experienced this before?",
          "I see. Let's discuss some treatment options that might help you.",
          "Based on what you've told me, I'd like to recommend..."
        ],
        hi: [
          "рдореИрдВ рдЖрдкрдХреА рдЪрд┐рдВрддрд╛ рд╕рдордЭрддрд╛ рд╣реВрдВред рдХреНрдпрд╛ рдЖрдк рдореБрдЭреЗ рдмрддрд╛ рд╕рдХрддреЗ рд╣реИрдВ рдХрд┐ рдпрд╣ рдХрдм рд╢реБрд░реВ рд╣реБрдЖ?",
          "рдЗрд╕реЗ рд╕рд╛рдЭрд╛ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рджред рдореБрдЭреЗ рдЖрдкрд╕реЗ рдХреБрдЫ рдФрд░ рдкреНрд░рд╢реНрди рдкреВрдЫрдиреЗ рджреЗрдВред",
          "рдпрд╣ рдЙрдкрдпреЛрдЧреА рдЬрд╛рдирдХрд╛рд░реА рд╣реИред рдХреНрдпрд╛ рдЖрдкрдиреЗ рдЗрд╕реЗ рдкрд╣рд▓реЗ рднреА рдЕрдиреБрднрд╡ рдХрд┐рдпрд╛ рд╣реИ?",
          "рдореИрдВ рд╕рдордЭ рдЧрдпрд╛ред рдЖрдЗрдП рдХреБрдЫ рдЙрдкрдЪрд╛рд░ рд╡рд┐рдХрд▓реНрдкреЛрдВ рдкрд░ рдЪрд░реНрдЪрд╛ рдХрд░рддреЗ рд╣реИрдВ рдЬреЛ рдЖрдкрдХреА рдорджрдж рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред",
          "рдЖрдкрдиреЗ рдЬреЛ рдмрддрд╛рдпрд╛ рд╣реИ рдЙрд╕рдХреЗ рдЖрдзрд╛рд░ рдкрд░, рдореИрдВ рд╕реБрдЭрд╛рдирд╛ рдЪрд╛рд╣реВрдВрдЧрд╛..."
        ],
        ta: [
          "роЙроЩрпНроХро│рпН роХро╡ро▓рпИропрпИ роиро╛ройрпН рокрпБро░ро┐роирпНродрпБроХрпКро│рпНроХро┐ро▒рпЗройрпН. роЗродрпБ роОрокрпНрокрпЛродрпБ родрпКроЯроЩрпНроХро┐ропродрпБ роОройрпНро▒рпБ роОройрпНройро┐роЯроорпН роЪрпКро▓рпНро▓ роорпБроЯро┐ропрпБрооро╛?",
          "роЕродрпИрокрпН рокроХро┐ро░рпНроирпНродродро▒рпНроХрпБ роиройрпНро▒ро┐. роиро╛ройрпН роЙроЩрпНроХро│ро┐роЯроорпН роЗройрпНройрпБроорпН роЪро┐ро▓ роХрпЗро│рпНро╡ро┐роХро│рпН роХрпЗроЯрпНроХроЯрпНроЯрпБроорпН.",
          "роЕродрпБ рокропройрпБро│рпНро│ родроХро╡ро▓рпН. роирпАроЩрпНроХро│рпН роЗродрпИ роорпБройрпНрокрпБ роЕройрпБрокро╡ро┐родрпНродро┐ро░рпБроХрпНроХро┐ро▒рпАро░рпНроХро│ро╛?",
          "роиро╛ройрпН рокро╛ро░рпНроХрпНроХро┐ро▒рпЗройрпН. роЙроЩрпНроХро│рпБроХрпНроХрпБ роЙродро╡роХрпНроХрпВроЯро┐роп роЪро┐ро▓ роЪро┐роХро┐роЪрпНроЪрпИ ро╡ро┐ро░рпБрокрпНрокроЩрпНроХро│рпИрокрпН рокро▒рпНро▒ро┐ ро╡ро┐ро╡ро╛родро┐рокрпНрокрпЛроорпН.",
          "роирпАроЩрпНроХро│рпН роОройрпНройро┐роЯроорпН роЪрпКройрпНройродройрпН роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓рпН, роиро╛ройрпН рокро░ро┐роирпНродрпБро░рпИроХрпНроХ ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпЗройрпН..."
        ]
      };

      const doctorResponses = responses[i18n.language] || responses.en;
      const randomResponse = doctorResponses[Math.floor(Math.random() * doctorResponses.length)];

      const doctorMessage = {
        id: Date.now() + 1,
        sender: 'doctor',
        message: randomResponse,
        timestamp: new Date()
      };

      setChatMessages(prev => [...prev, doctorMessage]);
    }, 2000);
  };

  const endConsultation = () => {
    setConsultationStatus('ended');
    if (timerRef.current) {
      clearInterval(timerRef.current);
    }

    // Save consultation record
    saveConsultationRecord();

    // Show completion message
    setTimeout(() => {
      if (onConsultationEnd) {
        onConsultationEnd({
          duration: consultationTime,
          status: 'completed'
        });
      }
    }, 3000);
  };

  const saveConsultationRecord = async () => {
    try {
      const consultationRecord = {
        user_id: user?.id,
        doctor_id: appointmentData?.doctor?.id,
        duration_minutes: Math.floor(consultationTime / 60),
        consultation_type: appointmentData?.consultationType || 'video',
        status: 'completed',
        language: i18n.language,
        notes: chatMessages.filter(msg => msg.sender === 'patient').map(msg => msg.message).join('; ')
      };

      if (isSupabaseConfigured()) {
        // In a real implementation, you would save to a consultations table
        console.log('ЁЯТ╛ Saving consultation record:', consultationRecord);
      } else {
        console.log('ЁЯУЭ Simulating consultation save:', consultationRecord);
      }
    } catch (error) {
      console.error('Error saving consultation:', error);
    }
  };

  const getStatusMessage = () => {
    const messages = {
      waiting: {
        en: 'Waiting for doctor to join...',
        hi: 'рдбреЙрдХреНрдЯрд░ рдХреЗ рд╢рд╛рдорд┐рд▓ рд╣реЛрдиреЗ рдХрд╛ рдЗрдВрддрдЬрд╝рд╛рд░...',
        ta: 'рооро░рпБродрпНродрпБро╡ро░рпН роЪрпЗро░рпБро╡родро▒рпНроХро╛роХ роХро╛родрпНродро┐ро░рпБроХрпНроХро┐ро▒родрпБ...'
      },
      connecting: {
        en: 'Connecting to consultation...',
        hi: 'рдкрд░рд╛рдорд░реНрд╢ рд╕реЗ рдЬреБрдбрд╝ рд░рд╣реЗ рд╣реИрдВ...',
        ta: 'роЖро▓рпЛроЪройрпИропрпБроЯройрпН роЗрогрпИроХрпНроХро┐ро▒родрпБ...'
      },
      active: {
        en: 'Consultation in progress',
        hi: 'рдкрд░рд╛рдорд░реНрд╢ рдЪрд▓ рд░рд╣рд╛ рд╣реИ',
        ta: 'роЖро▓рпЛроЪройрпИ роироЯрпИрокрпЖро▒рпНро▒рпБ ро╡ро░рпБроХро┐ро▒родрпБ'
      },
      ended: {
        en: 'Consultation completed',
        hi: 'рдкрд░рд╛рдорд░реНрд╢ рдкреВрд░рд╛ рд╣реБрдЖ',
        ta: 'роЖро▓рпЛроЪройрпИ роорпБроЯро┐роирпНродродрпБ'
      }
    };

    return messages[consultationStatus][i18n.language] || messages[consultationStatus].en;
  };

  return (
    <div className="consultation">
      {/* Consultation Header */}
      <div className="consultation-header">
        <div className="consultation-info">
          <h2>{t('videoConsultation')}</h2>
          <div className="consultation-details">
            <span className="doctor-name">
              ЁЯСитАНтЪХя╕П Dr. {appointmentData?.doctor?.name || 'Doctor'}
            </span>
            <span className="consultation-status" data-status={consultationStatus}>
              {getStatusMessage()}
            </span>
            {consultationStatus === 'active' && (
              <span className="consultation-timer">
                тП▒я╕П {formatTime(consultationTime)}
              </span>
            )}
          </div>
        </div>

        {consultationStatus === 'active' && (
          <button className="end-consultation-btn" onClick={endConsultation}>
            ЁЯУЮ {t('endConsultation')}
          </button>
        )}
      </div>

      <div className="consultation-container">
        {/* Video Section */}
        <div className="video-section">
          <div className="video-container">
            {/* Doctor Video (Tavus Placeholder) */}
            <div className="doctor-video">
              <div className="tavus-video-placeholder">
                {consultationStatus === 'active' ? (
                  <div className="video-active">
                    <img 
                      src={appointmentData?.doctor?.image || 'https://images.pexels.com/photos/5327580/pexels-photo-5327580.jpeg?auto=compress&cs=tinysrgb&w=400'} 
                      alt="Doctor"
                      className="doctor-video-feed"
                    />
                    <div className="video-overlay">
                      <span className="doctor-name-overlay">
                        Dr. {appointmentData?.doctor?.name || 'Doctor'}
                      </span>
                      <div className="video-quality">ЁЯФ┤ HD</div>
                    </div>
                  </div>
                ) : (
                  <div className="video-waiting">
                    <div className="video-placeholder-content">
                      <div className="video-icon">ЁЯУ╣</div>
                      <h4>{t('tavusVideoIntegration')}</h4>
                      <p>{t('waitingForDoctor')}</p>
                      {consultationStatus === 'connecting' && (
                        <div className="loading-spinner-large"></div>
                      )}
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Patient Video */}
            <div className="patient-video">
              <div className="patient-video-container">
                {isVideoEnabled ? (
                  <div className="video-placeholder patient-feed">
                    <div className="patient-avatar">ЁЯСд</div>
                    <span className="video-label">{t('you')}</span>
                  </div>
                ) : (
                  <div className="video-disabled">
                    <div className="video-disabled-icon">ЁЯУ╖</div>
                    <span>{t('videoOff')}</span>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Video Controls */}
          {consultationStatus === 'active' && (
            <div className="video-controls">
              <button 
                className={`control-btn ${isVideoEnabled ? 'active' : 'disabled'}`}
                onClick={toggleVideo}
                title={t('toggleVideo')}
              >
                {isVideoEnabled ? 'ЁЯУ╣' : 'ЁЯУ╖'}
              </button>
              
              <button 
                className={`control-btn ${isAudioEnabled ? 'active' : 'disabled'}`}
                onClick={toggleAudio}
                title={t('toggleAudio')}
              >
                {isAudioEnabled ? 'ЁЯОд' : 'ЁЯФЗ'}
              </button>
              
              <button className="control-btn" title={t('settings')}>
                тЪЩя╕П
              </button>
            </div>
          )}
        </div>

        {/* Chat Section */}
        <div className="chat-section">
          <div className="chat-header">
            <h3>{t('consultationChat')}</h3>
            <span className="chat-status">
              {consultationStatus === 'active' ? 'ЁЯЯв Active' : 'ЁЯЯб Waiting'}
            </span>
          </div>

          <div className="chat-messages">
            {chatMessages.map((message) => (
              <div 
                key={message.id} 
                className={`chat-message ${message.sender}`}
              >
                <div className="message-content">
                  <div className="message-header">
                    <span className="sender-name">
                      {message.sender === 'doctor' ? 
                        `Dr. ${appointmentData?.doctor?.name || 'Doctor'}` : 
                        message.sender === 'patient' ? t('you') : t('system')
                      }
                    </span>
                    <span className="message-time">
                      {message.timestamp.toLocaleTimeString([], { 
                        hour: '2-digit', 
                        minute: '2-digit' 
                      })}
                    </span>
                  </div>
                  <div className="message-text">{message.message}</div>
                </div>
              </div>
            ))}
          </div>

          {consultationStatus === 'active' && (
            <div className="chat-input-section">
              <div className="chat-input-container">
                <input
                  type="text"
                  value={chatInput}
                  onChange={(e) => setChatInput(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && sendChatMessage()}
                  placeholder={t('typeMessage')}
                  className="chat-input"
                />
                <button 
                  className="send-message-btn"
                  onClick={sendChatMessage}
                  disabled={!chatInput.trim()}
                >
                  ЁЯУд
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Affirmations Overlay */}
      {showAffirmations && consultationStatus === 'active' && (
        <div className="affirmations-overlay">
          <div className="affirmation-card">
            <div className="affirmation-text">
              {affirmations[i18n.language][currentAffirmation]}
            </div>
          </div>
        </div>
      )}

      {/* Consultation Ended Screen */}
      {consultationStatus === 'ended' && (
        <div className="consultation-ended">
          <div className="ended-content">
            <div className="ended-icon">тЬЕ</div>
            <h2>{t('consultationCompleted')}</h2>
            <p>{t('consultationCompletedMessage')}</p>
            <div className="consultation-summary">
              <div className="summary-item">
                <span>{t('duration')}:</span>
                <span>{formatTime(consultationTime)}</span>
              </div>
              <div className="summary-item">
                <span>{t('doctor')}:</span>
                <span>Dr. {appointmentData?.doctor?.name}</span>
              </div>
            </div>
            <div className="ended-actions">
              <button className="download-report-btn">
                ЁЯУД {t('downloadReport')}
              </button>
              <button className="book-followup-btn">
                ЁЯУЕ {t('bookFollowup')}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default Consultation;